#!/bin/bash

# Process new PDF: Extract data with pdfplumber, validate, and create PR
# This is the main orchestration script called by GitHub Actions
#
# Usage: process-new-pdf.sh <pdf-url> <link-text>
#
# Environment Variables Required:
#   GH_TOKEN - GitHub token for creating PRs (provided by GitHub Actions)
#
# Behavior:
#   - If a branch for this year range already exists, the script will fail
#   - This prevents redundant processing while a PR is under review
#   - Review and merge existing PRs before the next scheduled run

set -e  # Exit on error

if [ $# -lt 2 ]; then
  echo "Usage: process-new-pdf.sh <pdf-url> <link-text>"
  exit 1
fi

PDF_URL="$1"
LINK_TEXT="$2"

# Paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
JSON_FILE="$PROJECT_ROOT/swim_time_standards.json"
README_FILE="$PROJECT_ROOT/README.md"
TEMP_JSON="$PROJECT_ROOT/swim_time_standards.new.json"

echo "========================================"
echo "Processing New OSI Time Standards PDF"
echo "========================================"
echo "PDF URL: $PDF_URL"
echo "Link text: $LINK_TEXT"
echo ""

# Step 1: Extract year range for branch name
YEAR_RANGE=$(echo "$LINK_TEXT" | grep -oE '[0-9]{4}-[0-9]{4}' || echo "unknown")
BRANCH_NAME="update-time-standards-${YEAR_RANGE}"

echo "Step 1: Checking for existing branch/PR..."
cd "$PROJECT_ROOT"

# Configure git for GitHub Actions
git config user.name "github-actions[bot]"
git config user.email "github-actions[bot]@users.noreply.github.com"

# Fetch remote branches to check for existing branch
git fetch origin

# Check if branch already exists (locally or remotely)
if git rev-parse --verify "$BRANCH_NAME" >/dev/null 2>&1 || git rev-parse --verify "origin/$BRANCH_NAME" >/dev/null 2>&1; then
  echo "========================================"
  echo "Branch $BRANCH_NAME already exists!"
  echo "========================================"

  # Check if there's an open PR for this branch
  PR_INFO=$(gh pr list --head "$BRANCH_NAME" --state open --json number,url 2>&1)

  if echo "$PR_INFO" | grep -q '"number"'; then
    PR_NUMBER=$(echo "$PR_INFO" | grep -o '"number":[0-9]*' | cut -d':' -f2)
    PR_URL=$(echo "$PR_INFO" | grep -o '"url":"[^"]*"' | cut -d'"' -f4)

    echo "An open pull request already exists for this update:"
    echo "  PR #$PR_NUMBER: $PR_URL"
    echo ""
    echo "Please review and merge the existing PR before running again."
    echo "This prevents redundant processing of the same PDF update."
    echo "========================================"
    exit 1
  else
    echo "The branch exists but no open PR was found."
    echo "Please manually clean up the branch or merge/close any existing PR."
    echo "========================================"
    exit 1
  fi
fi

# Create new branch
echo "Creating new branch $BRANCH_NAME..."
git checkout -b "$BRANCH_NAME"
echo ""

# Step 2: Extract data from PDF
echo "Step 2: Extracting data from PDF..."
python3 "$SCRIPT_DIR/extract-pdf-with-pdfplumber.py" "$PDF_URL" "$LINK_TEXT" "$TEMP_JSON"
echo ""

# Step 3: Validate the extracted data
echo "Step 3: Validating extracted data..."
bash "$SCRIPT_DIR/validate-all.sh" "$TEMP_JSON" "$README_FILE"
echo ""

# Step 4: Replace the old JSON with the new one
echo "Step 4: Updating swim_time_standards.json..."
mv "$TEMP_JSON" "$JSON_FILE"
echo "✓ Updated swim_time_standards.json"
echo ""

# Step 5: Commit changes
echo "Step 5: Committing changes..."
git add "$JSON_FILE" "$README_FILE"

COMMIT_MESSAGE=$(cat <<EOF
Update OSI Time Standards to ${YEAR_RANGE}

- Updated swim time standards data from OSI PDF
- Source: ${PDF_URL}
- Extracted using pdfplumber
- Validated and flagged any inconsistencies

This commit was automatically generated by the PDF extraction workflow.
EOF
)

git commit -m "$COMMIT_MESSAGE"
echo "✓ Changes committed"
echo ""

# Step 6: Push branch
echo "Step 6: Pushing branch to remote..."
git push -u origin "$BRANCH_NAME"
echo "✓ Branch pushed"
echo ""

# Step 7: Create pull request
echo "Step 7: Creating pull request..."

PR_BODY=$(cat <<EOF
## Summary

Automated update to OSI Time Standards for ${YEAR_RANGE}.

**Source:** [${LINK_TEXT}](${PDF_URL})

This PR was automatically generated by the PDF extraction workflow.

## Changes

- Updated \`swim_time_standards.json\` with latest time standards
- Updated \`README.md\` with any data inconsistencies found

## Validation Results

The extracted data has been validated for:
- ✓ JSON structure integrity
- ✓ Time format validation (MM:SS.MS or SS.MS)
- ✓ Time progression validation (A < B+ < B)

Any inconsistencies found in the source data have been flagged with ⚠️ and documented in the README.

## Review Checklist

- [ ] Verify the data looks correct by spot-checking a few times
- [ ] Review the Data Inconsistencies section in README.md
- [ ] Check that all age groups and events are present
- [ ] Merge when ready - deployment will happen automatically

EOF
)

gh pr create \
  --title "Update OSI Time Standards to ${YEAR_RANGE}" \
  --body "$PR_BODY" \
  --base main \
  --head "$BRANCH_NAME"

echo "✓ Pull request created"
echo ""

echo "========================================"
echo "Process Complete!"
echo "========================================"
echo "A pull request has been created for review."
echo "Review the PR and merge when ready."
echo "========================================"
